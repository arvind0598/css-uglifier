/**
 * @summary replace tokens of the classlist using the record
 *
 * @param element each individual element
 * @param map the record passed to the parent function @see assignClasses
 *
 * @returns nothing, is a live version of the DOM
 */
const changeClasses = (element: Element, map: Record<string, string>): void => {
  const list = element.classList;
  list.forEach((token) => list.replace(token, map[token]));
};

/**
 * @summary replaces existing classes in document with new ones
 *
 * @description
 * selects every element except inside head because classes won't exist there
 * then replaces each token and returns new html
 * works because the document is a live collection.
 *
 * @param document parsed from input html
 * @param map generated by remapClasses
 *
 * @returns {Document} after changing all classes
 */
const assignClasses = (document: Document, map: Record<string, string>): Document => {
  const allElements = document.querySelectorAll('html, body, body *');
  allElements.forEach((e) => changeClasses(e, map));
  return document;
};

export default assignClasses;
